@page "/Account/LoginWith2fa"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using DevHobby.GPTizza.Data
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Two-factor authentication</PageTitle>
<h1>Uwierzytelnianie dwuskładnikowe</h1>
<hr />
<StatusMessage Message="@message" />
<p>Twoje logowanie jest chronione przez aplikację uwierzytelniającą. Wprowadź poniżej swój kod uwierzytelniający.</p>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <input type="hidden" name="RememberMe" value="@RememberMe" />
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.TwoFactorCode" class="form-control" autocomplete="off" />
                <label for="two-factor-code" class="form-label">Authenticator code</label>
                <ValidationMessage For="() => Input.TwoFactorCode" class="text-danger" />
            </div>
            <div class="checkbox mb-3">
                <label for="remember-machine" class="form-label">
                    <InputCheckbox @bind-Value="Input.RememberMachine" />
                    Zapamiętaj tę maszynę
                </label>
            </div>
            <div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Zaloguj się</button>
            </div>
        </EditForm>
    </div>
</div>
<p>
    Nie masz dostępu do swojego urządzenia uwierzytelniającego? Możesz
    <a href="Account/LoginWithRecoveryCode?ReturnUrl=@ReturnUrl">zaloguj się za pomocą kodu odzyskiwania</a>.
</p>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Nie można załadować użytkownika uwierzytelniania dwuskładnikowego.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("Użytkownik o identyfikatorze '{UserId}' zalogował się za pomocą uwierzytelniania dwuskładnikowego", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Użytkownik o ID'{UserId}' konto zablokowane.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Wprowadzono nieprawidłowy kod uwierzytelniający dla użytkownika o identyfikatorze '{UserId}'.", userId);
            message = "Błąd: Nieprawidłowy kod uwierzytelniający.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "{0} musi mieć co najmniej {2} i maksymalnie {1} znaków.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Kod uwierzytelniający")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Zapamiętaj tę maszynę")]
        public bool RememberMachine { get; set; }
    }
}

@page "/Account/Manage/ResetAuthenticator"
@using Microsoft.AspNetCore.Identity
@using DevHobby.GPTizza.Data
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ResetAuthenticator> Logger

<PageTitle>Zresetuj klucz uwierzytelniający</PageTitle>
<StatusMessage />
<h3>Zresetuj klucz uwierzytelniający</h3>
<div class="alert alert-warning" role="alert">
    <p>
        <span class="glyphicon glyphicon-warning-sign"></span>
        <strong>Jeśli zresetujesz klucz uwierzytelniający, Twoja aplikacja uwierzytelniająca nie będzie działać, dopóki jej nie skonfigurujesz ponownie.</strong>
    </p>
    <p>
        Ten proces wyłącza 2FA, dopóki nie zweryfikujesz aplikacji uwierzytelniającej.
        Jeśli nie ukończysz konfiguracji aplikacji uwierzytelniającej, możesz utracić dostęp do swojego konta.
    </p>
</div>
<div>
    <form @formname="reset-authenticator" @onsubmit="OnSubmitAsync" method="post">
        <AntiforgeryToken />
        <button class="btn btn-danger" type="submit">Zresetuj klucz uwierzytelniający</button>
    </form>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task OnSubmitAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        await UserManager.SetTwoFactorEnabledAsync(user, false);
        await UserManager.ResetAuthenticatorKeyAsync(user);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("Użytkownik o identyfikatorze „{UserId}” zresetował swój klucz aplikacji uwierzytelniającej.", userId);

        await SignInManager.RefreshSignInAsync(user);

        RedirectManager.RedirectToWithStatus(
            "Account/Manage/EnableAuthenticator",
            "Klucz aplikacji uwierzytelniającej został zresetowany. Musisz skonfigurować aplikację uwierzytelniającą przy użyciu nowego klucza.",
            HttpContext);
    }
}
